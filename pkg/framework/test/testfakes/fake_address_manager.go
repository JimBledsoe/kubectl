// Code generated by counterfeiter. DO NOT EDIT.
package testfakes

import (
	"sync"

	"k8s.io/kubectl/pkg/framework/test"
)

type FakeAddressManager struct {
	InitializeStub        func() (port int, resolvedAddress string, err error)
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct{}
	initializeReturns     struct {
		result1 int
		result2 string
		result3 error
	}
	initializeReturnsOnCall map[int]struct {
		result1 int
		result2 string
		result3 error
	}
	HostStub        func() (string, error)
	hostMutex       sync.RWMutex
	hostArgsForCall []struct{}
	hostReturns     struct {
		result1 string
		result2 error
	}
	hostReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PortStub        func() (int, error)
	portMutex       sync.RWMutex
	portArgsForCall []struct{}
	portReturns     struct {
		result1 int
		result2 error
	}
	portReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAddressManager) Initialize() (port int, resolvedAddress string, err error) {
	fake.initializeMutex.Lock()
	ret, specificReturn := fake.initializeReturnsOnCall[len(fake.initializeArgsForCall)]
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct{}{})
	fake.recordInvocation("Initialize", []interface{}{})
	fake.initializeMutex.Unlock()
	if fake.InitializeStub != nil {
		return fake.InitializeStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.initializeReturns.result1, fake.initializeReturns.result2, fake.initializeReturns.result3
}

func (fake *FakeAddressManager) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *FakeAddressManager) InitializeReturns(result1 int, result2 string, result3 error) {
	fake.InitializeStub = nil
	fake.initializeReturns = struct {
		result1 int
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAddressManager) InitializeReturnsOnCall(i int, result1 int, result2 string, result3 error) {
	fake.InitializeStub = nil
	if fake.initializeReturnsOnCall == nil {
		fake.initializeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 string
			result3 error
		})
	}
	fake.initializeReturnsOnCall[i] = struct {
		result1 int
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAddressManager) Host() (string, error) {
	fake.hostMutex.Lock()
	ret, specificReturn := fake.hostReturnsOnCall[len(fake.hostArgsForCall)]
	fake.hostArgsForCall = append(fake.hostArgsForCall, struct{}{})
	fake.recordInvocation("Host", []interface{}{})
	fake.hostMutex.Unlock()
	if fake.HostStub != nil {
		return fake.HostStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.hostReturns.result1, fake.hostReturns.result2
}

func (fake *FakeAddressManager) HostCallCount() int {
	fake.hostMutex.RLock()
	defer fake.hostMutex.RUnlock()
	return len(fake.hostArgsForCall)
}

func (fake *FakeAddressManager) HostReturns(result1 string, result2 error) {
	fake.HostStub = nil
	fake.hostReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAddressManager) HostReturnsOnCall(i int, result1 string, result2 error) {
	fake.HostStub = nil
	if fake.hostReturnsOnCall == nil {
		fake.hostReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.hostReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAddressManager) Port() (int, error) {
	fake.portMutex.Lock()
	ret, specificReturn := fake.portReturnsOnCall[len(fake.portArgsForCall)]
	fake.portArgsForCall = append(fake.portArgsForCall, struct{}{})
	fake.recordInvocation("Port", []interface{}{})
	fake.portMutex.Unlock()
	if fake.PortStub != nil {
		return fake.PortStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.portReturns.result1, fake.portReturns.result2
}

func (fake *FakeAddressManager) PortCallCount() int {
	fake.portMutex.RLock()
	defer fake.portMutex.RUnlock()
	return len(fake.portArgsForCall)
}

func (fake *FakeAddressManager) PortReturns(result1 int, result2 error) {
	fake.PortStub = nil
	fake.portReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeAddressManager) PortReturnsOnCall(i int, result1 int, result2 error) {
	fake.PortStub = nil
	if fake.portReturnsOnCall == nil {
		fake.portReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.portReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeAddressManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	fake.hostMutex.RLock()
	defer fake.hostMutex.RUnlock()
	fake.portMutex.RLock()
	defer fake.portMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAddressManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ test.AddressManager = new(FakeAddressManager)
